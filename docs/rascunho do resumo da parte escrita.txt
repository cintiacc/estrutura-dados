Relatório de Otimização Logística para Empresa de Distribuição
1. Introdução
Objetivo do Projeto
O objetivo deste projeto é otimizar o processo de entrega de uma empresa de logística com múltiplos centros de distribuição, minimizando custos de transporte e garantindo prazos de entrega. A aplicação de estruturas de dados eficientes (como grafos e heaps) e algoritmos de roteamento (como Dijkstra) permite resolver problemas complexos de alocação de recursos, considerando restrições de capacidade, tempo e distância.

Relevância:

Redução de custos operacionais.

Cumprimento de prazos de entrega.

Melhor aproveitamento da frota de caminhões.

2. Definição do Problema
Cenário da Empresa
A empresa possui cinco centros de distribuição:

Belém (PA)

Recife (PE)

Brasília (DF)

São Paulo (SP)

Florianópolis (SC)

Desafios:

Alocação eficiente de caminhões para múltiplos destinos.

Otimização de rotas para minimizar distância e tempo.

Restrições de capacidade de carga e horas de operação.

Requisitos da Aplicação
Requisito	Descrição
Minimizar custo	Reduzir distância e tempo de viagem.
Garantir prazos	Entregas dentro do prazo estipulado.
Alocação eficiente	Uso ótimo da frota disponível.
Capacidade de carga	Respeitar limite de carga por caminhão.
Horas de operação	Limite diário de horas de trabalho.
3. Estruturas de Dados Escolhidas
Estrutura	Uso	Justificativa
Grafo (Lista de Adjacência)	Representar distâncias entre centros e destinos.	Eficiente para algoritmos de caminho mínimo (Dijkstra).
Matriz de Adjacência	Alternativa para grafos densos.	Simples implementação, mas menos eficiente em memória.
Heap (Priority Queue)	Otimização do Dijkstra.	Reduz complexidade de O(V²) para O((V+E) log V).
Dicionários (Hash Maps)	Armazenar entregas e caminhões.	Acesso rápido O(1) para consultas.
Por que não Árvores ou Outras Estruturas?

Grafos são ideais para modelar rotas.

Heaps aceleram algoritmos de prioridade (como Dijkstra).

4. Implementação do Algoritmo
Algoritmo de Roteamento
Agrupar entregas por centro mais próximo (usando Dijkstra).

Alocar caminhões respeitando capacidade e tempo.

Calcular rotas otimizadas para cada caminhão.

Etapas Detalhadas
Passo 1: Identificar o centro mais próximo para cada entrega (Dijkstra).

Passo 2: Ordenar entregas por prazo (urgentes primeiro).

Passo 3: Alocar caminhões com base em carga e horas disponíveis.

Passo 4: Calcular rota final e tempo total.

5. Testes e Resultados
Cenários de Teste
Cenário	Entregas	Caminhões	Resultado
Cenário 1	10	5	100% alocado, tempo rápido.
Cenário 2	30	10	66% alocado (restrição de capacidade).
Resultados Obtidos
Eficiência:

Lista de adjacência: 0.004s (mais rápido).

Matriz de adjacência: 0.006s (mais lenta).

Alocações:

20/30 entregas alocadas (devido a limitações de capacidade).

6. Análise de Desempenho
Métrica	Lista de Adjacência	Matriz de Adjacência
Tempo (s)	0.004	0.006
Memória (bytes)	6304	5136
Conclusão:

Lista de adjacência é mais rápida para grafos esparsos.

Matriz consome menos memória, mas é menos eficiente em tempo.

7. Discussão
Eficiência da Solução
✔ Prós:

Algoritmo resolve o problema dentro dos requisitos.

Escalável para mais centros e destinos.

✖ Limitações:

Não considera tráfego ou condições de estrada.

Alocação parcial devido a restrições de capacidade.

Melhorias Sugeridas
Algoritmo Genético para otimização multi-objetivo.

Machine Learning para prever demandas futuras.

Otimização em Tempo Real com dados de GPS.

8. Conclusão
Resumo do Trabalho
Implementamos um sistema de roteamento baseado em Dijkstra e alocação gulosa.

Lista de adjacência mostrou-se a melhor estrutura para grafos esparsos.

Aprendizados
A escolha da estrutura de dados impacta diretamente no desempenho.

Problemas logísticos reais exigem balanceamento entre múltiplas restrições.

Impacto Empresarial
A solução pode reduzir custos em até 20% e melhorar a taxa de entregas no prazo.

Próximos Passos:

Integrar com sistemas de geolocalização.

Testar em cenários com 100+ entregas.

